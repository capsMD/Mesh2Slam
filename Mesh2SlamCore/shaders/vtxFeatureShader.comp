#version 310 es

// Specify the local work group size
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer VertexBuffer
{
    vec4 vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer
{
    int indices[];
};

layout(std430, binding = 2) buffer OutputBuffer
{
    ivec4 outData[];
};

uniform mat4 mMatrix;
uniform mat4 vMatrix;
uniform mat4 pMatrix;
uniform vec2 screenSize;
uniform float maxDepth;

void main()
{
    uint id      = gl_GlobalInvocationID.x;

    if (id >= uint(vertices.length()))
    {
        outData[id] = ivec4(0, 0, 0, 1u);
        return; // Out of bounds
    }

    vec4 vtx        = vertices[id];
    int  index      = indices[id];

    // World space
    vec4 vtxM = mMatrix * vtx;
    vec4 vtxMv = vMatrix * vtxM;
    vec4 vtxMvp = pMatrix * vMatrix * vtxM;

    float x = vtxMvp.x / vtxMvp.w;
    float y = vtxMvp.y / vtxMvp.w;
    float z = -vtxMv.z;

    float u = (x * 0.5f + 0.5f) * screenSize.x;
    float v = (y * -0.5f+0.5f)  * screenSize.y;

    if( (u < 0.0f )|| (u >= screenSize.x) || (v < 0.0f) || (v >= screenSize.y) || (z<0.0f) || (z > maxDepth))
    {
        outData[id] = ivec4(0, 0, 0, 1u);
    }
    else
    {
        outData[id] = ivec4(index, int(floor(u)), int(floor(v)), 1u);
    }
}